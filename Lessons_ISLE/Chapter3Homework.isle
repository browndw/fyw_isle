---
title: Chapter 03 Homework
author: Emily DeJeu
description:
keywords:
date: 06/12/2020
language: en-US
state:
    fillColor: black
    width: 800
    height: 400
    showGridy: false
    showGridx: false
    orientPlot: 'v'
    plotType: 'bar'
    plotText: ''
    plotText1: ''
    plotText2: ''
    plotSort: ''
    xlower: ''
    xupper: ''
    ylower: ''
    yupper: ''
    xlower2: ''
    xupper2: ''
    ylower2: ''
    yupper2: ''
    group: ''
require:
    dataset1: "https://isle.stat.cmu.edu/WAD-proseed_dataset_3.3_a.csv"
    dataset2: "https://isle.stat.cmu.edu/WAD-proseed_dataset_3.3_b.csv"
    dataset3: "https://isle.stat.cmu.edu/WAD-proseed_dataset_3.3_c.csv"
    dataset4: "https://isle.stat.cmu.edu/WAD-proseed_dataset_3.3_d.csv" 
server: https://isle.stat.cmu.edu
license: CC BY 4.0 [https://creativecommons.org/licenses/by/4.0]
---
# Chapter 3 Exercises


### After reading Chapter 3, please complete Exercises 3.1 and 3.3, below. Simply click each exercise's button to see your assigned tasks. 


***************************************
<Collapse
  header="Exercise 3.1"
>

**The purpose of this exercise is to refine your caption-writing skills.** 

On each of the 6 pages below, analyze the caption and determine whether it is adequate as it stands or if it needs more information. If it needs more information, specify how the caption should be revised.

**Remember to click 'Submit' after entering your answer!**




<Pages>
    <div>
        <FreeTextQuestion
          question="Figure 1: Average GPA (on 4-point scale) by hours studied per week of students at University X."
          solution=""
        />
    </div>
<div>
        <FreeTextQuestion
          question="Figure 2 shows the average test scores of male and female students."
          solution=""
        />
    </div>
    <div>
        <FreeTextQuestion
          question="Figure 3: Levelized costs (in dollars per megawatt hours of electricity) of five different power plants."
          solution=""
        />
    </div>
    <div>
        <FreeTextQuestion
          question="Table 1: Memory usage of five different web browsers with one tab open."
          solution=""
        />
    </div>
    <div>
        <FreeTextQuestion
          question="Figure 4: Harley-Davidson is the most popular motorcycle"
          solution=""
        />
    </div>
    <div>
        <FreeTextQuestion
          question="Table 2: Popularity of the top-selling motorcycle brands among registered motorcycle owners in Pittsburgh. Harley-Davidson is the most popular."
          solution=""
        />
    </div>

</Pages>
  
</Collapse>


<Collapse
  header="Exercise 3.3"
>

**The purpose of this exercise is to give you practice in creating strong data visualizations.**

For each of the four datasets, create a data visualization that tells a compelling story. You may choose to represent the data with a graph or a table, but be sure to design your visualization to emphasize the story you want to tell. 

Your visualizations should include 
* Clearly labeled axes 
* Readable and easily understandable legends (if applicable)
* Captions that contain 
    - The word “figure” or “table” followed by a number and a colon 
    - Clearly explained units of measurement
    - What is being compared 
    - Any other necessary context 

Be prepared to describe and defend your design choices in class discussion.

**Remember to click 'Submit' after entering your answer!**



<Pages>
    <div>
### Dataset 1: This data was collected to answer the question of what percentage of students are “satisfied” or “very satisfied” with the course offerings in their majors.

<DataTable
  data={global.dataset1}
/>

<Panel>
### Choose the type of plot you want to generate.

<SelectInput
    defaultValue={'Bar plot'}
    options={['Bar plot','Line plot']}
    onChange={( value ) =>  {
        if ( value === 'Bar plot' ) {
            lesson.setState({
                plotType: 'bar'
            });
        } else {
            lesson.setState({
                plotType: 'line'
            });
        }
    }}
/>

### Choose the orientation of your plot

<SelectInput
    defaultValue={'Vertical orientation'}
    options={['Vertical orientation','Horizontal orientation']}
    onChange={( value ) =>  {
        if ( value === 'Vertical orientation' ) {
            lesson.setState({
                orientPlot: 'v',
                varX1: dataset1.Major,
                varY1: dataset1.Percent_students_satisfied_verysatisfied
            });
        } else {
            lesson.setState({
                orientPlot: 'h',
                varX1: dataset1.Percent_students_satisfied_verysatisfied,
                varY1: dataset1.Major
            });
        }
    }}
/>

### Select the gridlines you want to show or hide

<Container>
  <Row>
    <Col md={6}>
      <SelectInput
    defaultValue={'Hide x gridlines'}
    options={['Hide x gridlines','Show x gridlines']}
    onChange={( value ) =>  {
        if ( value === 'Hide x gridlines' ) {
            lesson.setState({
                showGridx: false
            });
        } else {
            lesson.setState({
                showGridx: true
            });
        }
    }}
/>
    </Col>
    <Col md={6}>
      <SelectInput
    defaultValue={'Hide y gridlines'}
    options={['Hide y gridlines','Show y gridlines']}
    onChange={( value ) =>  {
        if ( value === 'Hide y gridlines' ) {
            lesson.setState({
                showGridy: false
            });
        } else {
            lesson.setState({
                showGridy: true
            });
        }
    }}
/>
    </Col>
  </Row>

</Container>

### Show or hide annotations

<SelectInput
    defaultValue={'Hide annotations'}
    options={['Hide annotations','Show x values', 'Show y values']}
    onChange={( value ) =>  {
        if ( value === 'Hide annotations' ) {
            lesson.setState({
                plotText: ''
            });
        } if ( value === 'Show x values' ) {
            lesson.setState({
                plotText: lesson.state.varX1
            });
        } if ( value === 'Show y values' ) {
           lesson.setState({
                plotText: lesson.state.varY1 
        });
        }
    }}
/>

### Sort by x or y values

<SelectInput
    defaultValue={'Unsorted'}
    options={['Unsorted','Sort x ascending', 'Sort x descending', 'Sort y ascending', 'Sort y descending']}
    onChange={( value ) =>  {
        if ( value === 'Unsorted' ) {
            lesson.setState({
                plotSort: ''
            });
        } if ( value === 'Sort x ascending' ) {
            lesson.setState({
                plotSort: [{
    type: 'sort',
    target: 'x',
    order: 'ascending'
  }]
            });
        } if ( value === 'Sort x descending' ) {
           lesson.setState({
                plotSort: [{
    type: 'sort',
    target: 'x',
    order: 'descending'
  }]
        });
        } if ( value === 'Sort y ascending' ) {
            lesson.setState({
                plotSort: [{
    type: 'sort',
    target: 'y',
    order: 'ascending'
  }]
            });
        } if ( value === 'Sort y descending' ) {
            lesson.setState({
                plotSort: [{
    type: 'sort',
    target: 'y',
    order: 'descending'
  }]
            });

        }
    }}
/>

### Select the color of your lines or bars

<ColorPicker onChange={(
    newColor
) =>  {
    lesson.setState({
        fillColor: newColor.hex
    })
}} />

<Dashboard onGenerate={( width, height ) => {
    lesson.setState({
        width,
        height
    });
}}>

### Set the dimensions of your plot.
    <NumberInput
        legend="Width"
        defaultValue={lesson.state.width}
        step={1}
    />
    <NumberInput
        legend="Height"
        defaultValue={lesson.state.height}
        step={1}
    />
</Dashboard>
<div style={{ position: 'relative' }} >
<Plotly 
  data={[
  {
    x: lesson.state.varX1 || dataset1.Major,
    y: lesson.state.varY1 || dataset1.Percent_students_satisfied_verysatisfied,
    type: lesson.state.plotType,
    orientation: lesson.state.orientPlot,
    text: lesson.state.plotText,
    textposition: 'auto',
    transforms: lesson.state.plotSort,
    marker: {
        color: lesson.state.fillColor
    }
  }
]}
  layout={{
  "width": lesson.state.width,
  "height": lesson.state.height,
  "xaxis": {
    "showgrid": lesson.state.showGridx,
    "title": "X-axis title",
    "range": [lesson.state.xlower, lesson.state.xupper]
  },
  "yaxis": {
    "showgrid": lesson.state.showGridy,
    "range": [lesson.state.ylower, lesson.state.yupper]
  }
}}  editable={true}
  draggable={true}
  id="test_plot1"
/>
</div>
</Panel>

<div>
  <ImageQuestion question="Create a data visualization for this data." />
</div>
<FreeTextQuestion
  question="Create a caption for this data visualization."
  solution=""
/>


</div>

<div>
### Dataset 2: This data was collected to answer the question of how much energy is used (measured in average kilowatts per hour) in two equivalent buildings in different parts of the United States. 

<DataTable
  data={global.dataset2}
/>

<Panel>

### Choose the type of plot you want to generate.

<SelectInput
    defaultValue={'Bar plot'}
    options={['Bar plot','Line plot']}
    onChange={( value ) =>  {
        if ( value === 'Bar plot' ) {
            lesson.setState({
                plotType: 'bar'
            });
        } else {
            lesson.setState({
                plotType: 'line'
            });
        }
    }}
/>

### Choose the orientation of your plot

<SelectInput
    defaultValue={'Vertical orientation'}
    options={['Vertical orientation','Horizontal orientation']}
    onChange={( value ) =>  {
        if ( value === 'Vertical orientation' ) {
            lesson.setState({
                orientPlot: 'v',
                varX2: dataset2.Month,
                varY2: dataset2.Kilowatts_per_hour
            });
        } else {
            lesson.setState({
                orientPlot: 'h',
                varX2: dataset2.Kilowatts_per_hour,
                varY2: dataset2.Month
            });
        }
    }}
/>

### Choose group variable

<SelectInput
    defaultValue={'None'}
    options={['None','City', 'Month']}
    onChange={( value ) =>  {
        if ( value === 'City' ) {
            lesson.setState({
                group: dataset2.City
            });
        } else if ( value === 'Month' ) {
            lesson.setState({
                group: dataset2.Month
            });
        } else
        lesson.setState({
                group: ''
            });
    }}
/>

### Select the gridlines you want to show or hide

<Container>
  <Row>
    <Col md={6}>
      <SelectInput
    defaultValue={'Hide x gridlines'}
    options={['Hide x gridlines','Show x gridlines']}
    onChange={( value ) =>  {
        if ( value === 'Hide x gridlines' ) {
            lesson.setState({
                showGridx: false
            });
        } else {
            lesson.setState({
                showGridx: true
            });
        }
    }}
/>
    </Col>
    <Col md={6}>
      <SelectInput
    defaultValue={'Hide y gridlines'}
    options={['Hide y gridlines','Show y gridlines']}
    onChange={( value ) =>  {
        if ( value === 'Hide y gridlines' ) {
            lesson.setState({
                showGridy: false
            });
        } else {
            lesson.setState({
                showGridy: true
            });
        }
    }}
/>
    </Col>
  </Row>

</Container>

### Show or hide annotations

<SelectInput
    defaultValue={'Hide annotations'}
    options={['Hide annotations','Show x values', 'Show y values']}
    onChange={( value ) =>  {
        if ( value === 'Hide annotations' ) {
            lesson.setState({
                plotText: ''
            });
        } if ( value === 'Show x values' ) {
            lesson.setState({
                plotText: lesson.state.varX2
            });
        } if ( value === 'Show y values' ) {
           lesson.setState({
                plotText: lesson.state.varY2 
        });
        }
    }}
/>

### Sort by x or y values

<SelectInput
    defaultValue={'Unsorted'}
    options={['Unsorted','Sort x ascending', 'Sort x descending', 'Sort y ascending', 'Sort y descending']}
    onChange={( value ) =>  {
        if ( value === 'Unsorted' ) {
            lesson.setState({
                plotSort: ''
            });
        } if ( value === 'Sort x ascending' ) {
            lesson.setState({
                plotSort: {
    type: 'sort',
    target: 'x',
    order: 'ascending'
  }
            });
        } if ( value === 'Sort x descending' ) {
           lesson.setState({
                plotSort: {
    type: 'sort',
    target: 'x',
    order: 'descending'
  }
        });
        } if ( value === 'Sort y ascending' ) {
            lesson.setState({
                plotSort: {
    type: 'sort',
    target: 'y',
    order: 'ascending'
  }
            });
        } if ( value === 'Sort y descending' ) {
            lesson.setState({
                plotSort: {
    type: 'sort',
    target: 'y',
    order: 'descending'
  }
            });

        }
    }}
/>

<Dashboard onGenerate={( width, height ) => {
    lesson.setState({
        width,
        height
    });
}}>

### Set the dimensions of your plot.
    <NumberInput
        legend="Width"
        defaultValue={lesson.state.width}
        step={1}
    />
    <NumberInput
        legend="Height"
        defaultValue={lesson.state.height}
        step={1}
    />

</Dashboard>
<div style={{ position: 'relative' }} >
<Plotly 
  data={[
  {
    x: lesson.state.varX2 || dataset2.Month,
    y: lesson.state.varY2 || dataset2.Kilowatts_per_hour,
    type: lesson.state.plotType,
    orientation: lesson.state.orientPlot,
    text: lesson.state.plotText,
    textposition: 'auto',
    transforms: [lesson.state.plotSort, {type: 'groupby', groups: lesson.state.group}]
  }
]}
  layout={{
      width: lesson.state.width,
      height: lesson.state.height,
      xaxis: {
          showgrid: lesson.state.showGridx,
          title: 'X-axis title',
          "range": [lesson.state.xlower, lesson.state.xupper]
      },
      yaxis: {
        showgrid: lesson.state.showGridy,
        "range": [lesson.state.ylower, lesson.state.yupper]
      }
  }}
  editable={true}
  draggable={true}
  id="test_plot2"
/></div>
</Panel>

<div>
  <ImageQuestion question="Create a data visualization for this data." />
</div>

<FreeTextQuestion
  question="Create a caption for this data visualization."
  solution=""
/>

</div>

<div>
### Dataset 3: This data was collected to answer the question of which type of hotdog is healthiest. Hotdogs were analyzed for both calories and sodium content. 

<DataTable
  data={global.dataset3}
/>

<Panel>

### Choose the type of plot you want to generate.

<SelectInput
    defaultValue={'Bar plot'}
    options={['Bar plot','Line plot']}
    onChange={( value ) =>  {
        if ( value === 'Bar plot' ) {
            lesson.setState({
                plotType: 'bar'
            });
        } else {
            lesson.setState({
                plotType: 'line'
            });
        }
    }}
/>

### Choose the orientation of your plot

<SelectInput
    defaultValue={'Vertical orientation'}
    options={['Vertical orientation','Horizontal orientation']}
    onChange={( value ) =>  {
        if ( value === 'Vertical orientation' ) {
            lesson.setState({
                orientPlot: 'v',
                varX13: dataset3.Type,
                varY13: dataset3.Average_Cals,
                varX23: dataset3.Type,
                varY23: dataset3.Average_Sodium_mgs
            });
        } else {
            lesson.setState({
                orientPlot: 'h',
                varX13: dataset3.Average_Cals,
                varY13: dataset3.Type,
                varX23: dataset3.Average_Sodium_mgs,
                varY23: dataset3.Type
            });
        }
    }}
/>

### Select the gridlines you want to show or hide

<Container>
  <Row>
    <Col md={6}>
      <SelectInput
    defaultValue={'Hide x gridlines'}
    options={['Hide x gridlines','Show x gridlines']}
    onChange={( value ) =>  {
        if ( value === 'Hide x gridlines' ) {
            lesson.setState({
                showGridx: false
            });
        } else {
            lesson.setState({
                showGridx: true
            });
        }
    }}
/>
    </Col>
    <Col md={6}>
      <SelectInput
    defaultValue={'Hide y gridlines'}
    options={['Hide y gridlines','Show y gridlines']}
    onChange={( value ) =>  {
        if ( value === 'Hide y gridlines' ) {
            lesson.setState({
                showGridy: false
            });
        } else {
            lesson.setState({
                showGridy: true
            });
        }
    }}
/>
    </Col>
  </Row>

</Container>

### Show or hide annotations

<SelectInput
    defaultValue={'Hide annotations'}
    options={['Hide annotations','Show x values', 'Show y values']}
    onChange={( value ) =>  {
        if ( value === 'Hide annotations' ) {
            lesson.setState({
                plotText1: '',
                plotText2: ''
            });
        } if ( value === 'Show x values' ) {
            lesson.setState({
                plotText1: lesson.state.varX13,
                plotText2: lesson.state.varX23
            });
        } if ( value === 'Show y values' ) {
           lesson.setState({
                plotText1: lesson.state.varY13,
                plotText2: lesson.state.varY23 
        });
        }
    }}
/>

### Sort by x or y values

<SelectInput
    defaultValue={'Unsorted'}
    options={['Unsorted','Sort x ascending', 'Sort x descending', 'Sort y ascending', 'Sort y descending']}
    onChange={( value ) =>  {
        if ( value === 'Unsorted' ) {
            lesson.setState({
                plotSort: ''
            });
        } if ( value === 'Sort x ascending' ) {
            lesson.setState({
                plotSort: {
    type: 'sort',
    target: 'x',
    order: 'ascending'
  }
            });
        } if ( value === 'Sort x descending' ) {
           lesson.setState({
                plotSort: {
    type: 'sort',
    target: 'x',
    order: 'descending'
  }
        });
        } if ( value === 'Sort y ascending' ) {
            lesson.setState({
                plotSort: {
    type: 'sort',
    target: 'y',
    order: 'ascending'
  }
            });
        } if ( value === 'Sort y descending' ) {
            lesson.setState({
                plotSort: {
    type: 'sort',
    target: 'y',
    order: 'descending'
  }
            });
        }
    }}
/>

<Dashboard onGenerate={( width, height ) => {
    lesson.setState({
        width,
        height
    });
}}>

### Set the dimensions of your plot.
    <NumberInput
        legend="Width"
        defaultValue={lesson.state.width}
        step={1}
    />
    <NumberInput
        legend="Height"
        defaultValue={lesson.state.height}
        step={1}
    />

</Dashboard>
<div style={{ position: 'relative' }} >

<Plotly 
  data={[
  {
    x: lesson.state.varX13 || dataset3.Type,
    y: lesson.state.varY13 || dataset3.Average_Cals,
    type: lesson.state.plotType,
    orientation: lesson.state.orientPlot,
    text: lesson.state.plotText1,
    textposition: 'auto',
    transforms: [lesson.state.plotSort],
    name: 'Average_Cals'
  },
  {
    x: lesson.state.varX23 || dataset3.Type,
    y: lesson.state.varY23 || dataset3.Average_Sodium_mgs,
    xaxis:'x2',
    yaxis:'y2',
    type: lesson.state.plotType,
    orientation: lesson.state.orientPlot,
    text: lesson.state.plotText2,
    textposition: 'auto',
    transforms: [lesson.state.plotSort],
    name:'Average_Sodium_mgs'
  }
]}
  layout={{
      width: lesson.state.width,
      height: lesson.state.height,
      grid:{rows:1, columns:2, pattern: 'independent'},
      xaxis: {
          anchor: "x",
          showgrid: lesson.state.showGridx},
      yaxis: {
          anchor: "y",
        showgrid: lesson.state.showGridy},
      xaxis2: {
        anchor: "x2",
        showgrid: lesson.state.showGridx
      },
      yaxis2: {
        anchor: "y2",
        showgrid: lesson.state.showGridy}  
  }}
  editable={true}
  draggable={true}
  id="test_plot3"
/>
</div>
</Panel>

<div>
  <ImageQuestion question="Create a data visualization for this data." />
</div>
<FreeTextQuestion
  question="Create a caption for this data visualization."
  solution=""
/>

</div>

<div>
### Dataset 4: This data was collected to answer the question of whether the “revolution” football helmet reduces concussion severity compared to standard helmets. The table represents the “Return to play” rates of football athletes experiencing a concussion while wearing the two types of helmet. 

<DataTable
  data={global.dataset4}
/>

<Panel>

### Choose the type of plot you want to generate.

<SelectInput
    defaultValue={'Bar plot'}
    options={['Bar plot','Line plot']}
    onChange={( value ) =>  {
        if ( value === 'Bar plot' ) {
            lesson.setState({
                plotType: 'bar'
            });
        } else {
            lesson.setState({
                plotType: 'line'
            });
        }
    }}
/>

### Choose the orientation of your plot

<SelectInput
    defaultValue={'Vertical orientation'}
    options={['Vertical orientation','Horizontal orientation']}
    onChange={( value ) =>  {
        if ( value === 'Vertical orientation' ) {
            lesson.setState({
                orientPlot: 'v',
                varX4: dataset4.Interval,
                varY4: dataset4.Percentage_athlete_concussions
            });
        } else {
            lesson.setState({
                orientPlot: 'h',
                varY4: dataset4.Interval,
                varX4: dataset4.Percentage_athlete_concussions
            });
        }
    }}
/>

### Choose group variable

<SelectInput
    defaultValue={'None'}
    options={['None','Helmet type', 'Interval']}
    onChange={( value ) =>  {
        if ( value === 'Helmet type' ) {
            lesson.setState({
                group: dataset4.Helmet_Type
            });
        } else if ( value === 'Interval' ) {
            lesson.setState({
                group: dataset4.Interval
            });
        } 
        else
        lesson.setState({
                group: ''
            });
    }}
/>

### Select the gridlines you want to show or hide

<Container>
  <Row>
    <Col md={6}>
      <SelectInput
    defaultValue={'Hide x gridlines'}
    options={['Hide x gridlines','Show x gridlines']}
    onChange={( value ) =>  {
        if ( value === 'Hide x gridlines' ) {
            lesson.setState({
                showGridx: false
            });
        } else {
            lesson.setState({
                showGridx: true
            });
        }
    }}
/>
    </Col>
    <Col md={6}>
      <SelectInput
    defaultValue={'Hide y gridlines'}
    options={['Hide y gridlines','Show y gridlines']}
    onChange={( value ) =>  {
        if ( value === 'Hide y gridlines' ) {
            lesson.setState({
                showGridy: false
            });
        } else {
            lesson.setState({
                showGridy: true
            });
        }
    }}
/>
    </Col>
  </Row>

</Container>

### Show or hide annotations

<SelectInput
    defaultValue={'Hide annotations'}
    options={['Hide annotations','Show x values', 'Show y values']}
    onChange={( value ) =>  {
        if ( value === 'Hide annotations' ) {
            lesson.setState({
                plotText: ''
            });
        } if ( value === 'Show x values' ) {
            lesson.setState({
                plotText: lesson.state.varX4
            });
        } if ( value === 'Show y values' ) {
           lesson.setState({
                plotText: lesson.state.varY4
        });
        }
    }}
/>

### Sort by x or y values

<SelectInput
    defaultValue={'Unsorted'}
    options={['Unsorted','Sort x ascending', 'Sort x descending', 'Sort y ascending', 'Sort y descending']}
    onChange={( value ) =>  {
        if ( value === 'Unsorted' ) {
            lesson.setState({
                plotSort: ''
            });
        } if ( value === 'Sort x ascending' ) {
            lesson.setState({
                plotSort: {
    type: 'sort',
    target: 'x',
    order: 'ascending'
  }
            });
        } if ( value === 'Sort x descending' ) {
           lesson.setState({
                plotSort: {
    type: 'sort',
    target: 'x',
    order: 'descending'
  }
        });
        } if ( value === 'Sort y ascending' ) {
            lesson.setState({
                plotSort: {
    type: 'sort',
    target: 'y',
    order: 'ascending'
  }
            });
        } if ( value === 'Sort y descending' ) {
            lesson.setState({
                plotSort: {
    type: 'sort',
    target: 'y',
    order: 'descending'
  }
            });
        }
    }}
/>

<Dashboard onGenerate={( width, height ) => {
    lesson.setState({
        width,
        height
    });
}}>

### Set the dimensions of your plot.
    <NumberInput
        legend="Width"
        defaultValue={lesson.state.width}
        step={1}
    />
    <NumberInput
        legend="Height"
        defaultValue={lesson.state.height}
        step={1}
    />

</Dashboard>
<div style={{ position: 'relative' }} >
<Plotly 
  data={[
  {
    x: lesson.state.varX4 || dataset4.Helmet_Type,
    y: lesson.state.varY4 || dataset4.Percentage_athlete_concussions, 
    type: lesson.state.plotType,
    orientation: lesson.state.orientPlot,
    text: lesson.state.plotText,
    textposition: 'auto',
    transforms: [{type: 'groupby', groups: lesson.state.group}, lesson.state.plotSort]
  }
]}
  layout={{
      width: lesson.state.width,
      height: lesson.state.height,
      xaxis: {
          showgrid: lesson.state.showGridx,
          title: 'X-axis title',
          "range": [lesson.state.xlower, lesson.state.xupper]
      },
      yaxis: {
        showgrid: lesson.state.showGridy,
        "range": [lesson.state.ylower, lesson.state.yupper]
      }
  }}
  editable={true}
  draggable={true}
  id="test_plot4"
/></div>
</Panel>

<div>
  <ImageQuestion question="Create a data visualization for this data." />
</div>
<FreeTextQuestion
  question="Create a caption for this data visualization."
  solution=""
/>

</div>
</Pages>

</Collapse>

**************************************************

#### Don't forget to click the 'Finish Lesson' button below and then the 'Download PDF of Responses' button on the pop-up. Remember, you must upload the PDF to Canvas to receive credit for completing these exercises.
<LessonSubmit />



